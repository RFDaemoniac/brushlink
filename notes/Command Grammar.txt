definition			=
concatenation		,
termination			;
alternation			| or newline with indentation
optional			[ ... ]
repetition			{ ... }
grouping			( ... )
terminal string		" ... "
terminal string		' ... '
comment				(* ... *)
special sequence	? ... ?
exception			-

implied default		< ... >

first steps, simple selector action target
then add conditional commands
and then more thorough kinds of actions and selectors

// this grammar is doing more than just syntax, it's semantics also.
// maybe I should try using a syntax grammar for what it's good for

Command
	Selection_Command
	Action_Command
	enqueue Action_Command

Selection_Command
	Selector [ termination ]

Action_Command
	Action termination
	Immediate_Action

Action
	move Target
	attack Target
	follow ( Target_Units | l_drag_line )
	stop

Immediate_Action
	r_click_location
	r_click_friendly_unit
	r_click_enemy_unit

Target
	Target_Units
	Target_Location
	Target_Area

Target_Units
	Selector
	l_click_enemy_unit
	l_click_friendly_unit

Target_Location
	position_of Selector
	l_click_location
	l_drag_line

Target_Area
	l_drag_line_area
	l_drag_box
	within_range

Selector
	[ Selector_Base ] [ Selector_Superlative ] { Selector_Generic }
	Selector union Selector
	Selector intersection Selector
	

Selector_Base
	friendly
	enemy

Selector_Superlative
	closest

Selector_Generic
	on_screen
	in_area Target_Area




Command
	Selector [ Termination ]
	< Current_Selection > < Move > ( Click_Location | Click_Friendly_Unit )
	< Current_Selection > < Attack > Click_Enemy_Unit
	< Current_Selection > Action Termination


Target
	Click < Termination >
	Selector

Action
	Move Target
	Attack < Enemy > Target
	Stop < Termination >

Click
	Click_Friendly_Unit
	Click_Enemy_Unit
	Click_Location

Selector
	< On_Screen > Friendly
	< On_Screen > Enemy
	On_Screen
	In_Area Area
	Selector Intersection Selector
	Selector < Intersection > Selector
	Selector Union Selector
	{ Superlative } Selector

Superlative
	Closest

Area
	Box_Select
	Perimeter_Select
