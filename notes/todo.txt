# new
features
	# implied nodes
	# left parameters - most important for numbers
	left param from implied value
		Command
			(Select/SelectorFriendly)
			->Union
	convert between variant subtypes (Location, Value, Target?)
		I assume this means OneOf should be handled as a Value
		Location/Point -> Location/Line on repeat of point...
		right now we're just handling this as an implied node
	variable type return value based on inputs
		GetUnitAttribute
		could just use a cast element, CastValueToPoint
	named values - return type of get named value?
	# Undo / Back
	# GetPrintString for Numbers
	# default_value_ptr list, allowing parameters to all of them in order
		main use case is default Command > (Select/SelectorActors,Select/Selector/CommandGroup)
			so if you just hit a number you select that command group
			but if you hit anything else you default to the selector actors
			not Selector / CommandGroup
	load definitions from data
		type checking at command element load time rather than runtime
	String tokens for named values
		can have a tab with enter your own or suggestions
			how to sort suggestions?
			should you be able to assign hotkeys at runtime? or change sort priority?
		suggestions can be all the current values that match the type, retrieved from context
		could also have this be a way to enter elements by their name, too, rather than having to look for them. ElementWithName returns all the elements of an acceptable type, using GetAllowedNextElements. Should have autocomplete enabled for these.
	- literals with buffered input
	element types and value mapping from data
		might need to use std::any instead of variant
		though we're still restricted to any type returnable by a function
		and the function deserialization requires an explicit mapping
	# AllowedArgumentTypes -> ordered priority
		so interface can select next tab automatically
		should we have an element for accepting a default value as explicit? or for ending a series of literal? in order to take the command card to the next priority input	
	# AcceptedArgumentType priority
		most distal and lowest parameter index
	hide some elements from the command card
	sort elements on command card
	permutable parameters for Selector
	replace previous argument of type (for back up the stack editing without undo)
	Add more elements
	Word Elements, parameters in context, child contexts

interface
	# tabs of tokens grouped by type
	# switch between tabs
	# hotkeys for tokens on current tab
	cursor in command tree for where current elements on current tab would go
		- this might differ if some accept left parameters and some don't
	# if there are no valid elements on current tab, go to next
	maybe skip left parameters by default, and have a different hotkey for enabling them (so tab is go to next, shift might be show left params for this type, or caps lock to toggle allowing them or not)
	if you type in an element from a tab and at the next cursor location the same tab is valid, but another tab appears before it in the priority list, I think we shouldn't switch. This is probably useful for things like Names which can be made of Letters and Digits

cleanup
	Consider shared interface for CommandElement and CommandParameter because so much is shared anyways
		AllParametersSatisfied vs IsSatisfied
		Append vs Set
		IsExplicitOrHasExplicitChild vs HasExplicitArgOrChild
		GetPrintString
		Evaluate
		EvaluateAs
		GetAllowedArgumentTypes vs GetAllowedTypes
	if we do unify the parameter and element interface can we compile down to just a tree of elements for more efficient evaluation? Repeatable params might prevent that, but we could use a helper element, or just keep the param
		after that composing std::functions using lambdas is probably okay
		because we're not going to need any additional parameters
	disable actor-dependent elements when actors is unset -- might be tricky
	reconsider getting actors from parent elements
	delete command_old after adding remaining elements
	context dependent default values for Selector Set
	remove context from append stack
		I think it's only used for default values, which we should have full elements for anyways, not using get by name
		context should only be required for evaluation, I think

bugs
	# why isn't GroupSize valid as a first element after SelectorFriendly
	? CommandParameter::GetAllowedTypes -> Table<ET::Enum, int> with counts
		ParamSingleImpliedOptions can accept multiple counts of the same argument type, I think? most parameters still return a single count. What about OneOf?
	Evaluate should be const. default_value should not be assigned to argument
	The current setup for numbers allows for an extra left-param because the rightmost leaf also accepts one. Should resolve by changing how literals are input
	# implied Selector/CommandGroup isn't working


# old
command
	parser
		new implied nodes
			unit types (select, build)
			ability types (select, use)
		prioritizing implied?
			so you can say "healing ability" and either mean use or select units with
		implied with left param
		# check type of new node with left_parameter
		# re-add attack left_parameter
		# fill defaults
		context sensitive defaults
		default_value tree or chain
		merge default value for sub items
		skip
		backspace, including removing implied with zero children
		one_of parameters
		allow types to be input that are left_parameters to next types
	element definitions
		are these actually an ast, and the others are a parse tree?
		what does optional without a default value mean?
			for example, Command has an optional action, but that could be a default action of "set current selection"
	interpreter
		execute element definitions
		define elements
	elements
		select units currently taking an action (move, attack, etc)
		sequence of actions
		concurrent actions (with order of priority?)
		conditionals
		stored values with names
		named coroutines